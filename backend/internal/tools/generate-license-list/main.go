package main

import (
	"bytes"
	"flag"
	"log"
	"os"
	"regexp"
	"slices"
	"strings"
	"text/template"

	"github.com/mitchellh/go-spdx"
)

var licenseIDRe = regexp.MustCompile(`^[a-zA-Z0-9+._-]+$`)

func main() {
	file := ""
	pkg := ""
	flag.StringVar(&file, "file", file, "File to write to")
	flag.StringVar(&pkg, "package", pkg, "Go package to declare")
	flag.Parse()

	licenseList, err := spdx.List()
	if err != nil {
		log.Fatal(err)
	}
	var osiApprovedLicenses []string
	for _, license := range licenseList.Licenses {
		if license.OSIApproved {
			if !licenseIDRe.MatchString(license.ID) {
				log.Fatalf("License ID doesn't match regexp: %s", license.ID)
			}
			osiApprovedLicenses = append(osiApprovedLicenses, license.ID)
		}
	}

	slices.Sort(osiApprovedLicenses)
	result := make([]string, len(osiApprovedLicenses))
	for i, license := range osiApprovedLicenses {
		licenseCode := `"` + license + `",`
		if i%5 == 4 {
			licenseCode += "\n"
		} else {
			licenseCode += " "
		}
		if i%5 == 0 {
			licenseCode = "\t" + licenseCode
		}
		result[i] = licenseCode
	}

	tpl := template.New("")
	tpl, err = tpl.Parse(templateText)
	if err != nil {
		log.Fatal(err)
	}
	wr := &bytes.Buffer{}
	if err := tpl.Execute(wr, struct {
		File     string
		Package  string
		Licenses string
	}{File: file, Package: pkg, Licenses: strings.Join(result, "")}); err != nil {
		log.Fatal(err)
	}

	if err := os.WriteFile(file+"~", wr.Bytes(), 0644); err != nil {
		log.Fatal(err)
	}
	if err := os.Rename(file+"~", file); err != nil {
		log.Fatal(err)
	}
}

var templateText = `// Code generated by internal/tools/generate-license-list. DO NOT EDIT.

package {{ .Package }}

//go:generate go run github.com/opentofu/registry-ui/internal/tools/generate-license-list -file {{ .File }} -package {{ .Package }}

var osiApprovedLicenses = []string{
{{.Licenses}}
}
`
